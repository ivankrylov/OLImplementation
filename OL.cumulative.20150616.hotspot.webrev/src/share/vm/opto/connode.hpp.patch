--- old/src/share/vm/opto/connode.hpp	2015-06-16 10:25:47.386363592 -0700
+++ new/src/share/vm/opto/connode.hpp	2015-06-16 10:25:47.310365430 -0700
@@ -266,12 +266,23 @@
 // cast pointer to pointer (different type)
 class CastPPNode: public ConstraintCastNode {
 public:
-  CastPPNode (Node *n, const Type *t ): ConstraintCastNode(n, t) {}
+  CastPPNode (Node *n, const Type *t ): ConstraintCastNode(n, t) { init_class_id(Class_CastPP); }
   virtual int Opcode() const;
   virtual uint ideal_reg() const { return Op_RegP; }
   virtual Node *Ideal_DU_postCCP( PhaseCCP * );
 };
 
+//------------------------------CastDerivedNode-------------------------------------
+// cast pointer of a container object with offset to a pointer of a contained object
+class CastDerivedNode: public CastPPNode {
+public:
+  CastDerivedNode(Node* n, const Type* t): CastPPNode(n, t) { init_class_id(Class_CastDerived); }
+  virtual const Type* Value(PhaseTransform* phase) const { return _type; }
+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape) { return NULL; } // don't optimize away
+  virtual int Opcode() const;
+  virtual Node* Ideal_DU_postCCP(PhaseCCP* ccp) { return this; } // don't optimize away
+};
+
 //------------------------------CheckCastPPNode--------------------------------
 // for _checkcast, cast pointer to pointer (different type), without JOIN,
 class CheckCastPPNode: public TypeNode {
@@ -669,31 +680,6 @@
   bool rtm_opt() const { return (_opt == RTM_OPT); }
 };
 
-//------------------------------ProfileBooleanNode-------------------------------
-// A node represents value profile for a boolean during parsing.
-// Once parsing is over, the node goes away (during IGVN).
-// It is used to override branch frequencies from MDO (see has_injected_profile in parse2.cpp).
-class ProfileBooleanNode : public Node {
-  uint _false_cnt;
-  uint _true_cnt;
-  bool _consumed;
-  bool _delay_removal;
-  virtual uint hash() const ;                  // { return NO_HASH; }
-  virtual uint cmp( const Node &n ) const;
-  public:
-  ProfileBooleanNode(Node *n, uint false_cnt, uint true_cnt) : Node(0, n),
-          _false_cnt(false_cnt), _true_cnt(true_cnt), _delay_removal(true), _consumed(false) {}
-
-  uint false_count() const { return _false_cnt; }
-  uint  true_count() const { return  _true_cnt; }
-
-  void consume() { _consumed = true;  }
-
-  virtual int Opcode() const;
-  virtual Node *Ideal(PhaseGVN *phase, bool can_reshape);
-  virtual Node *Identity(PhaseTransform *phase);
-  virtual const Type *bottom_type() const { return TypeInt::BOOL; }
-};
 
 //----------------------PartialSubtypeCheckNode--------------------------------
 // The 2nd slow-half of a subtype check.  Scan the subklass's 2ndary superklass
