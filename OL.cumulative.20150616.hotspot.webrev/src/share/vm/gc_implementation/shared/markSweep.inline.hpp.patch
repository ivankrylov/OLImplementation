--- old/src/share/vm/gc_implementation/shared/markSweep.inline.hpp	2015-06-16 10:25:44.154441448 -0700
+++ new/src/share/vm/gc_implementation/shared/markSweep.inline.hpp	2015-06-16 10:25:44.082443177 -0700
@@ -42,11 +42,11 @@
     G1StringDedup::enqueue_from_mark(obj);
   }
 #endif
-  // some marks may contain information we need to preserve so we store them away
-  // and overwrite the mark.  We'll restore it at the end of markSweep.
-  markOop mark = obj->mark();
-  obj->set_mark(markOopDesc::prototype()->set_marked());
 
+  // Some marks may contain information we need to preserve, so we store them
+  // away and overwrite the mark. We'll restore it at the end of Mark-Sweep.
+  markOop mark = obj->mark();
+  obj->convert_to_marked();
   if (mark->must_be_preserved(obj)) {
     preserve_mark(obj, mark);
   }
@@ -72,12 +72,29 @@
 }
 
 template <class T> inline void MarkSweep::mark_and_push(T* p) {
-//  assert(Universe::heap()->is_in_reserved(p), "should be in object space");
   T heap_oop = oopDesc::load_heap_oop(p);
   if (!oopDesc::is_null(heap_oop)) {
     oop obj = oopDesc::decode_heap_oop_not_null(heap_oop);
-    if (!obj->mark()->is_marked()) {
+    markOop mark = obj->mark();
+    if (!mark->is_marked()) {
+      debug_only(bool is_contained = obj->is_contained());
+      debug_only(bool is_container = obj->is_container());
       mark_object(obj);
+      assert(is_contained == obj->is_contained(),
+          "contained property not preserved");
+      assert(is_container == obj->is_container(),
+          "container property not preserved");
+      if (TraceObjectLayoutIntrinsics && ObjectLayoutIntrinsicsTraceLevel >= 2)
+      {
+        ResourceMark rm;
+        tty->print_cr(
+            "MarkSweep::mark_and_push: "
+            "type=%s, addr=0x%p, %scontained, %scontainer, mark=0x%p=>0x%p",
+            obj->klass()->signature_name(), (void*) obj,
+            obj->is_contained() ? "" : "not ",
+            obj->is_container() ? "" : "not ",
+            (void*) mark, (void*) (obj->mark()));
+      }
       _marking_stack.push(obj);
     }
   }
