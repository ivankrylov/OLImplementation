--- old/src/share/vm/runtime/reflection.cpp	2015-06-16 10:25:49.782305460 -0700
+++ new/src/share/vm/runtime/reflection.cpp	2015-06-16 10:25:49.710307210 -0700
@@ -36,7 +36,6 @@
 #include "oops/objArrayKlass.hpp"
 #include "oops/objArrayOop.hpp"
 #include "prims/jvm.h"
-#include "prims/jvmtiExport.hpp"
 #include "runtime/arguments.hpp"
 #include "runtime/handles.inline.hpp"
 #include "runtime/javaCalls.hpp"
@@ -943,11 +942,6 @@
           // Method resolution threw an exception; wrap it in an InvocationTargetException
             oop resolution_exception = PENDING_EXCEPTION;
             CLEAR_PENDING_EXCEPTION;
-            // JVMTI has already reported the pending exception
-            // JVMTI internal flag reset is needed in order to report InvocationTargetException
-            if (THREAD->is_Java_thread()) {
-              JvmtiExport::clear_detected_exception((JavaThread*) THREAD);
-            }
             JavaCallArguments args(Handle(THREAD, resolution_exception));
             THROW_ARG_0(vmSymbols::java_lang_reflect_InvocationTargetException(),
                 vmSymbols::throwable_void_signature(),
@@ -1080,12 +1074,6 @@
     // Method threw an exception; wrap it in an InvocationTargetException
     oop target_exception = PENDING_EXCEPTION;
     CLEAR_PENDING_EXCEPTION;
-    // JVMTI has already reported the pending exception
-    // JVMTI internal flag reset is needed in order to report InvocationTargetException
-    if (THREAD->is_Java_thread()) {
-      JvmtiExport::clear_detected_exception((JavaThread*) THREAD);
-    }
-
     JavaCallArguments args(Handle(THREAD, target_exception));
     THROW_ARG_0(vmSymbols::java_lang_reflect_InvocationTargetException(),
                 vmSymbols::throwable_void_signature(),
@@ -1127,11 +1115,13 @@
 // This would be nicer if, say, java.lang.reflect.Method was a subclass
 // of java.lang.reflect.Constructor
 
-oop Reflection::invoke_method(oop method_mirror, Handle receiver, objArrayHandle args, TRAPS) {
-  oop mirror             = java_lang_reflect_Method::clazz(method_mirror);
-  int slot               = java_lang_reflect_Method::slot(method_mirror);
-  bool override          = java_lang_reflect_Method::override(method_mirror) != 0;
-  objArrayHandle ptypes(THREAD, objArrayOop(java_lang_reflect_Method::parameter_types(method_mirror)));
+oop Reflection::invoke_method(oop method_mirror, Handle receiver,
+    objArrayHandle method_args, TRAPS) {
+  oop mirror = java_lang_reflect_Method::clazz(method_mirror);
+  int slot = java_lang_reflect_Method::slot(method_mirror);
+  bool override = java_lang_reflect_Method::override(method_mirror) != 0;
+  objArrayHandle ptypes(THREAD,
+      objArrayOop(java_lang_reflect_Method::parameter_types(method_mirror)));
 
   oop return_type_mirror = java_lang_reflect_Method::return_type(method_mirror);
   BasicType rtype;
@@ -1144,36 +1134,75 @@
   instanceKlassHandle klass(THREAD, java_lang_Class::as_Klass(mirror));
   Method* m = klass->method_with_idnum(slot);
   if (m == NULL) {
-    THROW_MSG_0(vmSymbols::java_lang_InternalError(), "invoke");
+    THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), "invoke");
   }
   methodHandle method(THREAD, m);
 
-  return invoke(klass, method, receiver, override, ptypes, rtype, args, true, THREAD);
+  return invoke(klass, method, receiver, override, ptypes, rtype, method_args,
+      true, THREAD);
 }
 
-
-oop Reflection::invoke_constructor(oop constructor_mirror, objArrayHandle args, TRAPS) {
-  oop mirror             = java_lang_reflect_Constructor::clazz(constructor_mirror);
-  int slot               = java_lang_reflect_Constructor::slot(constructor_mirror);
-  bool override          = java_lang_reflect_Constructor::override(constructor_mirror) != 0;
-  objArrayHandle ptypes(THREAD, objArrayOop(java_lang_reflect_Constructor::parameter_types(constructor_mirror)));
+oop Reflection::invoke_constructor(oop ctor_mirror, objArrayHandle ctor_args,
+    TRAPS) {
+  oop mirror = java_lang_reflect_Constructor::clazz(ctor_mirror);
+  int slot = java_lang_reflect_Constructor::slot(ctor_mirror);
+  bool override = java_lang_reflect_Constructor::override(ctor_mirror) != 0;
+  objArrayHandle ptypes(THREAD,
+      objArrayOop(java_lang_reflect_Constructor::parameter_types(ctor_mirror)));
 
   instanceKlassHandle klass(THREAD, java_lang_Class::as_Klass(mirror));
   Method* m = klass->method_with_idnum(slot);
   if (m == NULL) {
-    THROW_MSG_0(vmSymbols::java_lang_InternalError(), "invoke");
+    THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), "invoke");
   }
   methodHandle method(THREAD, m);
-  assert(method->name() == vmSymbols::object_initializer_name(), "invalid constructor");
+  assert(method->name() == vmSymbols::object_initializer_name(),
+      "invalid constructor");
+
+  // Make sure we are not trying to instantiate an abstract klass
+  klass->check_valid_for_instantiation(false, CHECK_NULL);
 
-  // Make sure klass gets initialize
+  // Make sure klass is initialized
   klass->initialize(CHECK_NULL);
 
   // Create new instance (the receiver)
-  klass->check_valid_for_instantiation(false, CHECK_NULL);
   Handle receiver = klass->allocate_instance_handle(CHECK_NULL);
 
-  // Ignore result from call and return receiver
-  invoke(klass, method, receiver, override, ptypes, T_VOID, args, false, CHECK_NULL);
+  invoke(klass, method, receiver, override, ptypes, T_VOID, ctor_args, false,
+      CHECK_NULL);
+  return receiver();
+}
+
+oop Reflection::invoke_constructor_in_place(address obj_addr,
+    bool is_contained, bool is_container, oop ctor_mirror,
+    objArrayHandle ctor_args, TRAPS) {
+  oop mirror = java_lang_reflect_Constructor::clazz(ctor_mirror);
+  int slot = java_lang_reflect_Constructor::slot(ctor_mirror);
+  bool override = java_lang_reflect_Constructor::override(ctor_mirror) != 0;
+  objArrayHandle ptypes(THREAD,
+      objArrayOop(java_lang_reflect_Constructor::parameter_types(ctor_mirror)));
+
+  instanceKlassHandle klass(THREAD, java_lang_Class::as_Klass(mirror));
+  Method* m = klass->method_with_idnum(slot);
+  if (m == NULL) {
+    THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), "invoke");
+  }
+  methodHandle method(THREAD, m);
+  assert(method->name() == vmSymbols::object_initializer_name(),
+      "invalid constructor");
+
+  // Make sure we are not trying to instantiate an abstract klass
+  klass->check_valid_for_instantiation(false, CHECK_NULL);
+
+  // Make sure klass is initialized
+  klass->initialize(CHECK_NULL);
+
+  // Create new instance (the receiver) at the given address (in preallocated
+  // memory region)
+  Handle receiver = klass->allocate_instance_at_handle(obj_addr, is_contained,
+      is_container, CHECK_NULL);
+
+  invoke(klass, method, receiver, override, ptypes, T_VOID, ctor_args, false,
+      CHECK_NULL);
   return receiver();
 }
